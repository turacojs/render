{"version":3,"sources":["../../../src/browser/renderers/BrowserComponentRenderer.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;0CAA8B,mCAAmC;;;;;IAE5C,wBAAwB;cAAxB,wBAAwB;;aAAxB,wBAAwB;8BAAxB,wBAAwB;;mCAAxB,wBAAwB;;;iBAAxB,wBAAwB;;;;;;;;;;;;;;eAOrC,cAAC,aAAa,EAAE,UAAU,EAAE;AAC5B,gBAAM,OAAO,GAAG,SAAQ,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,EAAE,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,SAAS,EAAK;AAC9F,oBAAI,UAAU,GAAG,UAAU,CAAC,YAAY,CAAC,2BAA2B,CAAC,CAAC;AACtE,0BAAU,GAAG,UAAU,IAAI,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;AAClD,yBAAS,CAAC,UAAU,GAAG,UAAU,IAAI,EAAE,CAAC;AACxC,yBAAS,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;;AAErC,oBAAI,SAAS,CAAC,QAAQ,IAAI,SAAS,CAAC,QAAQ,CAAC,MAAM,EAAE;AACjD,6BAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,WAAW,EAAK;AACxC,iCAAS,CAAC,GAAG,GAAG,WAAW,CAAC,GAAG,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,cAAc,GAAG,WAAW,GAAG,IAAI,CAAC,CAAC;qBACtG,CAAC,CAAC;iBACN;;AAED,oBAAI,SAAS,CAAC,IAAI,EAAE;AAChB,6BAAS,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;iBACxC;;AAED,oBAAI,SAAS,CAAC,KAAK,EAAE;AACjB,6BAAS,CAAC,KAAK,EAAE,CAAC;iBACrB;;AAED,0BAAU,CAAC,UAAU,GAAG,SAAS,CAAC;aACrC,CAAC,CAAC;AACH,sBAAU,CAAC,UAAU,GAAG,OAAO,CAAC;AAChC,mBAAO,OAAO,CAAC;SAClB;;;;;;;;;;;;;;;;eAQK,gBAAC,SAAS,EAAE,UAAU,EAAE,IAAI,EAAE;AAChC,qBAAS,CAAC,UAAU,GAAG,UAAU,IAAI,EAAE,CAAC;AACxC,qBAAS,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;AACrC,qBAAS,CAAC,MAAM,EAAE,CAAC;AACnB,gBAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;AAC9B,gBAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;;AAEhC,gBAAM,YAAY,GAAG,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;;AAE5C,gBAAI,YAAY,oBAAmB,EAAE;AACjC,uBAAO,YAAY,CAAC,IAAI,CAAC,UAAC,OAAO,EAAK;AAClC,wBAAI,OAAO,EAAE;AACT,iCAAS,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;qBAChD;;AAED,6BAAS,CAAC,KAAK,EAAE,CAAC;AAClB,2BAAO,SAAS,CAAC;iBACpB,CAAC,CAAC;aACN;;AAED,gBAAI,YAAY,EAAE;AACd,yBAAS,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;aACrD;;AAED,qBAAS,CAAC,KAAK,EAAE,CAAC;AAClB,mBAAO,SAAS,CAAC;SACpB;;;WAlEgB,wBAAwB;;;qBAAxB,wBAAwB","file":"BrowserComponentRenderer.js","sourcesContent":["import ComponentRenderer from '../../renderers/ComponentRenderer';\n\nexport default class BrowserComponentRenderer extends ComponentRenderer {\n    /**\n     * Invoked only on browser just the first time\n     *\n     * @param {string} componentName\n     * @param {Element} $container\n     */\n    load(componentName, $container) {\n        const promise = Promise.resolve(this.factory.load(componentName, $container)).then((component) => {\n            let properties = $container.getAttribute('data-component-properties');\n            properties = properties && JSON.parse(properties);\n            component.properties = properties || {};\n            component.init(component.properties);\n\n            if (component.elements && component.elements.length) {\n                component.elements.forEach((elementName) => {\n                    component['$' + elementName] = component.$container.findFirst('[data-role=\"' + elementName + '\"]');\n                });\n            }\n\n            if (component.load) {\n                component.load(component.properties);\n            }\n\n            if (component.ready) {\n                component.ready();\n            }\n\n            $container._component = component;\n        });\n        $container._component = promise;\n        return promise;\n    }\n\n    /**\n     * @param {Component} component\n     * @param {Object} [properties]\n     * @param {Object} [data]\n     * @returns {Component}\n     */\n    render(component, properties, data) {\n        component.properties = properties || {};\n        component.init(component.properties);\n        component.create();\n        this._initElements(component);\n        this._initComponents(component);\n\n        const renderResult = component.render(data);\n\n        if (renderResult instanceof Promise) {\n            return renderResult.then((content) => {\n                if (content) {\n                    component.$container.empty().append(content);\n                }\n\n                component.ready();\n                return component;\n            });\n        }\n\n        if (renderResult) {\n            component.$container.empty().append(renderResult);\n        }\n\n        component.ready();\n        return component;\n    }\n}\n"]}