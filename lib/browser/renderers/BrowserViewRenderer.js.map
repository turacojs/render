{"version":3,"sources":["../../../src/browser/renderers/BrowserViewRenderer.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;yCAAqC,4BAA4B;;;;kCACnD,uBAAuB;;;;;IAEhB,mBAAmB;cAAnB,mBAAmB;;aAAnB,mBAAmB;8BAAnB,mBAAmB;;mCAAnB,mBAAmB;;;iBAAnB,mBAAmB;;;;;;;;;;;eAIhC,cAAC,QAAQ,EAAE,KAAK,EAAE;AAClB,mBAAO,SAAQ,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,IAAI,EAAK;AACtE,oBAAI,UAAU,GAAG,KAAK,CAAC,YAAY,CAAC,sBAAsB,CAAC,CAAC;AAC5D,0BAAU,GAAG,UAAU,IAAI,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;AAClD,oBAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;;AAEtB,oBAAI,IAAI,CAAC,KAAK,EAAE;AACZ,wBAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;iBAC1B;;AAED,qBAAK,CAAC,KAAK,GAAG,IAAI,CAAC;aACtB,CAAC,CAAC;SACN;;;;;;;;+BAEK,gBAAC,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE;;;AAC3B,gBAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AACtB,gBAAI,CAAC,aAAa,EAAE,CAAC;;AAErB,mBAAO,SAAQ,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,YAAY,EAAK;AAC7D,oBAAI,YAAY,EAAE;AACd,wBAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;iBAChD;;AAED,oBAAI,CAAC,IAAI,CAAC,MAAM,EAAE;AACd,0BAAM,IAAI,KAAK,CAAC,yCAAyC,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;iBACtF;;AAED,oBAAM,WAAW,GAAG,gCAAE,KAAK,CAAC,cAAc,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC;;AAEjE,oBAAI,WAAW,EAAE;AACb,+BAAW,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC/B,wBAAI,CAAC,OAAO,GAAG,WAAW,CAAC,KAAK,CAAC;AACjC,2BAAO,IAAI,CAAC;iBACf;;AAED,uBAAO,MAAK,gBAAgB,CAAC,IAAI,CAAC,MAAM,EAAE;AACtC,yBAAK,EAAE,IAAI,CAAC,KAAK;AACjB,2BAAO,EAAE,IAAI,CAAC,SAAS;iBAC1B,CAAC,CAAC,IAAI,CAAC,UAAC,MAAM,EAAK;AAChB,wBAAI,CAAC,OAAO,GAAG,MAAM,CAAC;AACtB,2BAAO,IAAI,CAAC;iBACf,CAAC,CAAC;aACN,CAAC,CAAC;SACN;;;WA/CgB,mBAAmB;;;qBAAnB,mBAAmB","file":"BrowserViewRenderer.js","sourcesContent":["import BrowserComponentRenderer from './BrowserComponentRenderer';\nimport $ from 'springbokjs-dom/lib/$';\n\nexport default class BrowserViewRenderer extends BrowserComponentRenderer {\n    /**\n     * Invoked only on browser just the first time\n     */\n    load(viewName, $view) {\n        return Promise.resolve(this.factory.load(viewName, $view)).then((view) => {\n            let properties = $view.getAttribute('data-view-properties');\n            properties = properties && JSON.parse(properties);\n            view.init(properties);\n\n            if (view.ready) {\n                view.ready(properties);\n            }\n\n            $view._view = view;\n        });\n    }\n\n    render(view, properties, data) {\n        view.init(properties);\n        view._initElements();\n\n        return Promise.resolve(view.render(data)).then((renderResult) => {\n            if (renderResult) {\n                view.$container.empty().append(renderResult);\n            }\n\n            if (!view.parent) {\n                throw new Error('Cannot render a view without a parent: ' + view.constructor.name);\n            }\n\n            const $parentView = $.first('[data-view=\"' + view.parent + '\"]');\n\n            if ($parentView) {\n                $parentView._view.update(view);\n                view._parent = $parentView._view;\n                return view;\n            }\n\n            return this.createThenRender(view.parent, {\n                title: view.title,\n                content: view.$fragment,\n            }).then((parent) => {\n                view._parent = parent;\n                return view;\n            });\n        });\n    }\n}\n"]}