{"version":3,"sources":["../../../src/browser/renderers/BrowserViewRenderer.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;yCAAqC,4BAA4B;;;;IAE5C,mBAAmB;cAAnB,mBAAmB;;aAAnB,mBAAmB;8BAAnB,mBAAmB;;mCAAnB,mBAAmB;;;iBAAnB,mBAAmB;;;;;;eAIhC,cAAC,QAAQ,EAAE,KAAK,EAAE;AAClB,gBAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;AAClD,gBAAI,UAAU,GAAG,KAAK,CAAC,YAAY,CAAC,sBAAsB,CAAC,CAAC;AAC5D,sBAAU,GAAG,UAAU,IAAI,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;AAClD,gBAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AACtB,gBAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AACtB,iBAAK,CAAC,KAAK,GAAG,IAAI,CAAC;SACtB;;;eAGK,gBAAC,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE;;;AAC3B,gBAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AACtB,gBAAI,CAAC,aAAa,EAAE,CAAC;;AAErB,mBAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,YAAM;AACjD,oBAAI,CAAC,IAAI,CAAC,MAAM,EAAE;AACd,0BAAM,IAAI,KAAK,CAAC,yCAAyC,GAAG,QAAQ,CAAC,CAAC;iBACzE;AACD,oBAAI,WAAW,GAAG,CAAC,CAAC,KAAK,CAAC,cAAc,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC;;AAE/D,oBAAI,WAAW,EAAE;AACb,+BAAW,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC/B,wBAAI,CAAC,OAAO,GAAG,WAAW,CAAC,KAAK,CAAC;AACjC,2BAAO,IAAI,CAAC;iBACf;;AAED,uBAAO,MAAK,gBAAgB,CAAC,IAAI,CAAC,MAAM,EAAE;AACtC,yBAAK,EAAE,IAAI,CAAC,KAAK;AACjB,2BAAO,EAAE,IAAI,CAAC,SAAS;iBAC1B,CAAC,CAAC,IAAI,CAAC,UAAC,MAAM,EAAK;AAChB,wBAAI,CAAC,OAAO,GAAG,MAAM,CAAC;AACtB,2BAAO,IAAI,CAAC;iBACf,CAAC,CAAC;aACN,CAAC,CAAC;SACN;;;WAtCgB,mBAAmB;;;qBAAnB,mBAAmB","file":"BrowserViewRenderer.js","sourcesContent":["import BrowserComponentRenderer from './BrowserComponentRenderer';\n\nexport default class BrowserViewRenderer extends BrowserComponentRenderer {\n    /**\n     * Invoked only on browser just the first time\n     */\n    load(viewName, $view) {\n        const view = this.factory.create(viewName, $view);\n        var properties = $view.getAttribute('data-view-properties');\n        properties = properties && JSON.parse(properties);\n        view.init(properties);\n        view.load(properties);\n        $view._view = view;\n    }\n\n\n    render(view, properties, data) {\n        view.init(properties);\n        view._initElements();\n\n        return Promise.resolve(view.render(data)).then(() => {\n            if (!view.parent) {\n                throw new Error('Cannot render a view without a parent: ' + viewName);\n            }\n            var $parentView = $.first('[data-view=\"' + view.parent + '\"]');\n\n            if ($parentView) {\n                $parentView._view.update(view);\n                view._parent = $parentView._view;\n                return view;\n            }\n\n            return this.createThenRender(view.parent, {\n                title: view.title,\n                content: view.$fragment\n            }).then((parent) => {\n                view._parent = parent;\n                return view;\n            });\n        });\n    }\n}\n"]}