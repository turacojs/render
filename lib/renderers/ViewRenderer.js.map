{"version":3,"sources":["../../src/renderers/ViewRenderer.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;iCAA4B,qBAAqB;;;;;;;IAE5B,YAAY;cAAZ,YAAY;;;;;;;AAKlB,aALM,YAAY,CAKjB,OAAO,EAAE,iBAAiB,EAAE;8BALvB,YAAY;;AAMzB,mCANa,YAAY,6CAMnB,OAAO,EAAE;AACf,YAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;KAC9C;;iBARgB,YAAY;;;;;;;+BAUvB,gBAAC,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE;;;AAC3B,gBAAI,CAAC,SAAS,GAAG,UAAA,cAAc,EAAI;AAC/B,uBAAO,UAAA,UAAU,EAAI;AACjB,wBAAM,IAAI,GAAG,UAAU,IAAI,UAAU,CAAC,IAAI,CAAC;AAC3C,wBAAI,UAAU,EAAE;AACZ,+BAAO,UAAU,CAAC,IAAI,CAAC;qBAC1B;;AAED,2BAAO,MAAK,iBAAiB,CAAC,gBAAgB,CAAC,cAAc,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;iBACpF,CAAC;aACL,CAAC;;AAEF,gBAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AACtB,gBAAI,CAAC,MAAM,EAAE,CAAC;;AAEd,gBAAI,UAAU,EAAE;AACZ,oBAAI,CAAC,UAAU,CAAC,YAAY,CAAC,sBAAsB,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;aACpF;;AAED,gBAAI,IAAI,CAAC,MAAM,EAAE;AACb,oBAAI,CAAC,UAAU,CAAC,YAAY,CAAC,kBAAkB,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;aACjE;;AAED,mBAAO,SAAQ,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,OAAO,EAAK;AACxD,oBAAI,OAAO,EAAE;AACT,wBAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;iBAC3C;;AAED,oBAAI,CAAC,IAAI,CAAC,MAAM,EAAE;AACd,2BAAO,IAAI,CAAC;iBACf;;AAED,oBAAI,UAAU,GAAG,IAAI,CAAC,UAAU,IAAI,EAAE,CAAC;AACvC,0BAAU,CAAC,UAAU,GAAG,UAAU,CAAC;AACnC,0BAAU,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;AAC9B,0BAAU,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC;;AAErC,uBAAO,MAAK,gBAAgB,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;aACpE,CAAC,CAAC;SACN;;;WAjDgB,YAAY;;;qBAAZ,YAAY","file":"ViewRenderer.js","sourcesContent":["import ComponentRender from './ComponentRenderer';\n\nexport default class ViewRenderer extends ComponentRender {\n    /**\n     * @param {ViewFactory} factory\n     * @param {ComponentRender} componentRenderer\n     */\n    constructor(factory, componentRenderer) {\n        super(factory);\n        this.componentRenderer = componentRenderer;\n    }\n\n    render(view, properties, data) {\n        view.component = componentClass => {\n            return properties => {\n                const data = properties && properties.data;\n                if (properties) {\n                    delete properties.data;\n                }\n\n                return this.componentRenderer.createThenRender(componentClass, properties, data);\n            };\n        };\n\n        view.init(properties);\n        view.create();\n\n        if (properties) {\n            view.$container.setAttribute('data-view-properties', JSON.stringify(properties));\n        }\n\n        if (view.parent) {\n            view.$container.setAttribute('data-view-parent', view.parent);\n        }\n\n        return Promise.resolve(view.render(data)).then((content) => {\n            if (content) {\n                view.$container.empty().append(content);\n            }\n\n            if (!view.parent) {\n                return view;\n            }\n\n            let dataLayout = data.dataLayout || {};\n            dataLayout.dataLayout = dataLayout;\n            dataLayout.title = view.title;\n            dataLayout.content = view.$container;\n\n            return this.createThenRender(view.parent, undefined, dataLayout);\n        });\n    }\n}\n"]}